;;; -*- inferior-lisp-program: "microlisp" -*-

;;; This definition of EVAL is based on McCarthy's Micro-Lisp Manual.

(defun eval (e a)
  (cond ((atom e)
         (cond ((eq e nil) nil)
               ((eq e t) t)
               (t (cdr ((label assoc
                               (lambda (e a)
                                 (cond ((null a) nil)
                                       ((eq e (caar a)) (car a))
                                       (t (assoc e (cdr a))))))
                        e
                        a)))))
        ((atom (car e))
         (cond ((eq (car e) (quote quote)) (cadr e))
               ((eq (car e) (quote car))
                (car (eval (cadr e) a)))
               ((eq (car e) (quote cdr))
                (cdr (eval (cadr e) a)))
               ((eq (car e) (quote cadr))
                (cadr (eval (cadr e) a)))
               ((eq (car e) (quote caddr))
                (caddr (eval (cadr e) a)))
               ((eq (car e) (quote cadar))
                (cadar (eval (cadr e) a)))
               ((eq (car e) (quote caddar))
                (caddar (eval (cadr e) a)))
               ((eq (car e) (quote atom))
                (atom (eval (cadr e) a)))
               ((eq (car e) (quote null))
                (null (eval (cadr e) a)))
               ((eq (car e) (quote cons))
                (cons (eval (cadr e) a)
                      (eval (caddr e) a)))
               ((eq (car e) (quote eq))
                (eq (eval (cadr e) a)
                    (eval (caddr e) a)))
               ((eq (car e) (quote cond))
                ((label evcond
                        (lambda (u a)
                          (cond ((eval (caar u) a)
                                 (eval (cadar u) a))
                                (t (evcond (cdr u) a)))))
                 (cdr e)
                 a))
               (t
                (eval (cons (cdr ((label assoc
                                         (lambda (e a)
                                           (cond ((null a) nil)
                                                 ((eq e (caar a)) (car a))
                                                 (t (assoc e (cdr a))))))
                                  (car e)
                                  a))
                            (cdr e))
                      a))))
        ((eq (caar e) (quote lambda))
         (eval (caddar e)
               ((label ffappend
                       (lambda (u v)
                         (cond ((null u) v)
                               (t (cons (car u)
                                        (ffappend (cdr u) v))))))
                ((label pairup
                        (lambda (u v)
                          (cond ((null u) nil)
                                (t (cons (cons (car u) (car v))
                                         (pairup (cdr u) (cdr v)))))))
                 (cadar e)
                 ((label evlis
                         (lambda (u a)
                           (cond ((null u) nil)
                                 (t (cons (eval (car u) a)
                                          (evlis (cdr u) a))))))
                  (cdr e)
                  a))
                a)))
        ((eq (caar e) (quote label))
         (eval (cons (caddar e) (cdr e))
               (cons (cons (cadar e) (car e)) a)))))
